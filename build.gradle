import de.seitenbau.ozghub.prozessdeployment.model.request.DuplicateProcessKeyAction

import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.time.format.ResolverStyle

plugins {
  id 'groovy'

  // Used to build the process modell.
  // This plugin CAN NOT deploy to OZG-Hub (only SBW and Amt24).
  // Most recent version:
  // https://plugins.gradle.org/plugin/de.seitenbau.serviceportal.prozesspipeline
  // If you update this, dont forget to also update commons/serviceportal/build.gradle as well
  id "de.seitenbau.serviceportal.prozesspipeline" version "2024.02.12-0"

  // Used to DEPLOY to OZG-Hub.
  // This plugin CAN NOT build the models by itself.
  // Most recent version:
  // https://plugins.gradle.org/plugin/de.seitenbau.ozghub.prozessdeployment
  id "de.seitenbau.ozghub.prozessdeployment" version "2024.02.12-0"
}

// The the public API is maintained by the SchildkrÃ¶ten Team and the most recent version listed on maven central:
// https://central.sonatype.com/artifact/de.seitenbau.serviceportal/prozess-scripting-api
String serviceportalPublicApiVersion = "1.165.4"

initJsonParameters()

repositories {
  mavenCentral()
}

dependencies {
  [
          'org.codehaus.groovy:groovy-all:2.5.22',

          "de.seitenbau.serviceportal:prozess-scripting-api:${serviceportalPublicApiVersion}",

          "org.activiti:activiti-engine:5.22.0",

  ].each { dep ->
    implementation(dep) {
      // Required to remove unneeded logging frameworks that break the build
      // See: https://stackoverflow.com/a/59667631/3298787
      exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
  }

  // Include commons subproject
  implementation project("commons.serviceportal")

  // testing
  implementation group: 'net.bytebuddy', name: 'byte-buddy-gradle-plugin', version: '1.10.1'
  testImplementation "org.spockframework:spock-core:2.0-M1-groovy-2.5"
}

// Set source directories (where to compile and test from)
sourceSets {
  main {
    groovy {
      srcDirs = ["scripts"]
    }
    resources {
      srcDirs = ["scripts"]
    }
  }
  test {
    groovy {
      srcDirs = ["tests"]
    }
    resources {
      srcDirs = ["scripts", "forms"]
    }
  }
}

test {
  // Enable logging of test results
  testLogging {
    events "passed", "skipped", "failed"
  }

  // Enforce JUnit for Spock runs (see https://blog.solidsoft.pl/2020/01/02/migrating-spock-1.3-tests-to-spock-2.0/ )
  useJUnitPlatform()

  // Fail the build if no rests were run.
  afterSuite { desc, result ->
    if (!desc.parent) {
      if (result.testCount == 0) {
        throw new IllegalStateException("No tests were found. Failing the build")
      }
    }
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////
// Configure SBW build tasks                                                                             //
// Adapted from:                                                                                         //
// https://bitbucket.dev.seitenbau.net/projects/IMBW-SERVICEPORTAL/repos/ozg-hub-deployment-beispielprojekt/browse/BenutzerinfoAuslesen/build.gradle //
// These statements should be moved to the gradle plugin at some point, but are not yet (2020-09-29)     //
///////////////////////////////////////////////////////////////////////////////////////////////////////////

listProcesses {
  url = getVariableValue("url")
  user = getVariableValue("user")
  password = getVariableValue("password")
}

listForms {
  url = getVariableValue("url")
  user = getVariableValue("user")
  password = getVariableValue("password")
}

undeployProcess {
  url = getVariableValue("url")
  user = getVariableValue("user")
  password = getVariableValue("password")
  deploymentId = getVariableValue("deploymentId")
  deleteProcessInstances = getVariableValue("deleteProcessInstances")
}

undeployForm {
  url = getVariableValue("url")
  user = getVariableValue("user")
  password = getVariableValue("password")
  deploymentId = getVariableValue("deploymentId")
}

deployProcess {
  url = getVariableValue("url")
  user = getVariableValue("user")
  password = getVariableValue("password")
  files = getVariableValue("files")
  deploymentName = getVariableValue("deploymentName")
  versionName = getVariableValue("versionName")
  duplicateProcesskeyAction = getVariableValue("duplicateProcesskeyAction") as DuplicateProcessKeyAction
  engine = getVariableValue("engine")
  metadataFiles = getVariableValue("metadataFiles")
}

deployForms {
  url = getVariableValue("url")
  user = getVariableValue("user")
  password = getVariableValue("password")
  files = getVariableValue("files")
}

encryptParameterValue {
  url = getVariableValue("url")
  user = getVariableValue("user")
  password = getVariableValue("password")
  processKey = getVariableValue("processKey")
  parameterValue = getVariableValue("parameterValue")
  inputFile = getVariableValue("inputFile")
  charset = getVariableValue("charset")
  base64 = getVariableValue("base64")
  outputFile = getVariableValue("outputFile")
}

mergeScripts {
  debug = getVariableValue('debug', false)
}

buildModel {
  debug = getVariableValue('debug', false)
  mandant = getVariableValue('1', false)
  dependsOn 'mergeScripts'
}

createScheduledUndeploymentOzg {
  url = getVariableValue("url")
  user = getVariableValue("user")
  password = getVariableValue("password")
  deploymentId = getVariableValue("deploymentId")
  undeploymentDate = getVariableValueAsLocalDate("undeploymentDate")
  undeploymentAnnounceMessageSubject = getVariableValue("undeploymentAnnounceMessageSubject")
  undeploymentAnnounceMessageBody = getVariableValue("undeploymentAnnounceMessageBody")
  undeploymentMessageSubject = getVariableValue("undeploymentMessageSubject")
  undeploymentMessageBody = getVariableValue("undeploymentMessageBody")

  undeploymentHintText = getVariableValue("undeploymentHintText")
  startToDisplayUndeploymentHint = getVariableValueAsLocalDate("startToDisplayUndeploymentHint")
}

deleteScheduledUndeploymentOzg {
  url = getVariableValue("url")
  user = getVariableValue("user")
  password = getVariableValue("password")
  deploymentId = getVariableValue("deploymentId")
}

listScheduledUndeploymentsOzg {
  url = getVariableValue("url")
  user = getVariableValue("user")
  password = getVariableValue("password")
}

def initJsonParameters()
{
  def jsonFilename = project.hasProperty('parameters')
          ? project.property('parameters')
          : 'config/parameters.json'

  def jsonParameters
  def jsonParametersFile = file(jsonFilename)
  if (jsonParametersFile.exists())
  {
    jsonParameters = new groovy.json.JsonSlurper().parseText(jsonParametersFile.text)
    // merge arrays, e.g. ["a","b","c"], into multi-line strings, e.g. "a\nb\nc"
    jsonParameters.replaceAll((key, value) -> {
      if (value instanceof Collection)
      {
        return value.join('\n')
      }
      return value
    })
  }
  else
  {
    jsonParameters = [:]
  }

  project.ext.set("jsonParameters", jsonParameters)
}

def getVariableValue(String name, defaultValue) {
  def envValue = System.getenv("OZGH_${name.toUpperCase()}")

  if (envValue != null) {
    return envValue
  }

  if (project.hasProperty(name)) {
    return project.property(name)
  }

  def jsonValue = project.jsonParameters[name]

  if (jsonValue != null) {
    return jsonValue
  }

  return defaultValue
}

def getVariableValue(String name)
{
  return getVariableValue(name, null)
}

def getVariableValueAsLocalDate(String name) {
  try {
    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern('dd.MM.uuuu')
    String stringValue = getVariableValue(name)
    return stringValue == null
            ? null
            : LocalDate.parse(stringValue,dateTimeFormatter.withResolverStyle(ResolverStyle.STRICT))

  } catch (Exception e) {
    throw new RuntimeException("Der Parameter '" + name
            + "' konnte nicht als Datum interpretiert werden: " + e.getMessage());
  }
}
